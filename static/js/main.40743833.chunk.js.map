{"version":3,"sources":["logo.svg","Home.js","About.js","LineChart.js","MuteChat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Jumbotron","fluid","Container","About","LineChart","props","useEffect","Chart","pluginService","register","afterDraw","chart","easing","style","width","height","data","options","maintainAspectRatio","MuteChat","webcamRef","React","useRef","canvasRef","datasets","label","fill","fillColor","strokeColor","pointColor","backgroundColor","pointStrokeColor","pointHighlightFill","pointHighlightStroke","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","a","faceapi","console","log","navigator","mediaDevices","getUserMedia","video","stream","current","srcObject","loadModels","canvas","ctx","getContext","fillRect","strokeStyle","fillStyle","stroke","getFaceDetectorOptions","minConfidence","isFaceDetectionModelLoaded","ssdMobilenetv1","params","Row","Col","rowSpan","ref","onLoadedMetadata","onPlay","v","videoEl","paused","ended","setTimeout","withFaceLandmarks","result","landmarks","mouth","getMouth","beginPath","dx","x","dy","y","forEach","p","i","px","parseInt","py","strokeText","push","length","shift","processFace","id","autoPlay","muted","playsInline","App","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","NavDropdown","title","Item","Divider","eventKey","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.40743833.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport {\r\n    Container,\r\n    Jumbotron,\r\n    Button\r\n} from 'react-bootstrap';\r\n\r\nexport default function Home() {\r\n    return (\r\n        <Jumbotron fluid>\r\n            <Container>\r\n                <h1>Mute Chat</h1>\r\n                <p>\r\n                    Oh Yeah\r\n    </p>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}","import React from 'react';\r\nimport {\r\n    Container,\r\n    Jumbotron,\r\n    Button\r\n} from 'react-bootstrap';\r\n\r\nexport default function About() {\r\n    return (\r\n        <Jumbotron fluid>\r\n            <Container>\r\n                <h1>About Mute Chat</h1>\r\n                <p>\r\n                    This is a modified jumbotron that occupies the entire horizontal space of\r\n                    its parent.\r\n    </p>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\n\r\nimport { Chart, Line } from 'react-chartjs-2';\r\n\r\nexport default function LineChart(props) {\r\n\r\n    const update = (data) => {\r\n        console.log(data);\r\n    }\r\n\r\n    useEffect(() => {\r\n        Chart.pluginService.register({\r\n            afterDraw: function (chart, easing) {\r\n                // Plugin code.\r\n            }\r\n        });\r\n    });\r\n\r\n    return (\r\n        <div style={{ width: props.width, height: props.height }}>\r\n            <Line\r\n                data={props.data}\r\n                options={{ maintainAspectRatio: false, ...props.options }} />\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react';\r\n\r\nimport {\r\n    Container,\r\n    Button,\r\n    Row, Col,\r\n} from 'react-bootstrap';\r\n\r\nimport * as faceapi from 'face-api.js';\r\n\r\nimport LineChart from './LineChart';\r\nimport Webcam from \"react-webcam\"; // https://openbase.io/js/react-webcam\r\n\r\nconst videoConstraints = {\r\n    width: 300,\r\n    height: 200,\r\n    facingMode: \"user\"\r\n};\r\n\r\nconst SSD_MOBILENETV1 = 'ssd_mobilenetv1'\r\nconst TINY_FACE_DETECTOR = 'tiny_face_detector'\r\nconst MTCNN = 'mtcnn'\r\n\r\nlet selectedFaceDetector = SSD_MOBILENETV1\r\n\r\n// ssd_mobilenetv1 options\r\nlet minConfidence = 0.5\r\n\r\n// tiny_face_detector options\r\nlet inputSize = 512\r\nlet scoreThreshold = 0.5\r\n\r\n//mtcnn options\r\nlet minFaceSize = 20\r\nlet modelLoaded = false\r\n\r\nexport default function MuteChat() {\r\n    const webcamRef = React.useRef(null);\r\n    const canvasRef = React.useRef(null);\r\n    const chartRef = React.useRef(null);\r\n\r\n\r\n    var data = {\r\n        // labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\r\n        datasets: [{\r\n            label: \"Width\",\r\n            fill: false,\r\n            fillColor: \"rgba(0,0,220,0.2)\",\r\n            strokeColor: \"rgba(220,220,220,1)\",\r\n            pointColor: \"rgba(220,220,220,1)\",\r\n            backgroundColor: \"rgba(0,0,220,0.2)\",\r\n            pointStrokeColor: \"#fff\",\r\n            pointHighlightFill: \"#fff\",\r\n            pointHighlightStroke: \"rgba(220,220,220,1)\",\r\n            data: [41, 92, 45, 62, 14, 12, 11, 32, 68, 98, 10, 112]\r\n        }, {\r\n            label: \"Height\",\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: [41, 24, 5, 6, 7, 76, 87, 8, 6, 34, 45, 79, 88, 7, 33, 4, 7, 98]\r\n        }]\r\n    };\r\n\r\n    // const capture = React.useCallback(\r\n    //     () => {\r\n    //         const imageSrc = webcamRef.current.getScreenshot();\r\n    //         console.log(imageSrc);\r\n    //     },\r\n    //     [webcamRef]\r\n    // );\r\n\r\n    useEffect(() => {\r\n        async function loadModels() {\r\n            await faceapi.loadSsdMobilenetv1Model('/models')\r\n            await faceapi.loadFaceLandmarkModel('/models')\r\n            \r\n            // await faceapi.loadMtcnnModel('/models')  // Deprecated\r\n            // await faceapi.loadFaceLandmarkTinyModel('/models')\r\n            // await faceapi.loadFaceRecognitionModel('/models')\r\n            // await faceapi.loadFaceExpressionModel('/models')\r\n            console.log('loadModels')\r\n\r\n            const stream = await navigator.mediaDevices.getUserMedia({ video: {} })\r\n            const videoEl = webcamRef.current\r\n            videoEl.srcObject = stream\r\n        }\r\n\r\n        loadModels()\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext(\"2d\");\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        ctx.strokeStyle = \"blue\";\r\n        ctx.fillStyle = '#444';\r\n        ctx.stroke();\r\n    });\r\n\r\n    const getFaceDetectorOptions = () => {\r\n        return selectedFaceDetector === SSD_MOBILENETV1\r\n            ? new faceapi.SsdMobilenetv1Options({ minConfidence })\r\n            : (\r\n                selectedFaceDetector === TINY_FACE_DETECTOR\r\n                    ? new faceapi.TinyFaceDetectorOptions({ inputSize, scoreThreshold })\r\n                    : new faceapi.MtcnnOptions({ minFaceSize })\r\n            )\r\n    }\r\n\r\n    const getCurrentFaceDetectionNet = function () {\r\n        if (selectedFaceDetector === SSD_MOBILENETV1) {\r\n            return faceapi.nets.ssdMobilenetv1\r\n        }\r\n        if (selectedFaceDetector === TINY_FACE_DETECTOR) {\r\n            return faceapi.nets.tinyFaceDetector\r\n        }\r\n        if (selectedFaceDetector === MTCNN) {\r\n            return faceapi.nets.mtcnn\r\n        }\r\n    }\r\n\r\n    const isFaceDetectionModelLoaded = function () {\r\n        return !!getCurrentFaceDetectionNet().params\r\n    }\r\n\r\n\r\n    const onPlay = (v) => {\r\n        async function processFace() {\r\n            // console.log(\"Oh yeah\")\r\n            // var videoEl = webcamRef.current.video\r\n            var videoEl = webcamRef.current\r\n            // const videoEl = webcamRef.current.getScreenshot()\r\n            // videoEl = \"webcam\"\r\n            // console.log('videoEl', videoEl)\r\n            // console.log('!isFaceDetectionModelLoaded()', !isFaceDetectionModelLoaded())\r\n            if (videoEl.paused || videoEl.ended || !isFaceDetectionModelLoaded()) {\r\n                // if (videoEl.paused || videoEl.ended || !modelLoaded) {\r\n                // console.log(`onPlay pre-condition failed.\r\n                //         \\tselectedFaceDetector ${selectedFaceDetector}\r\n                //         \\faceapi.nets.ssdMobilenetv1 ${faceapi.nets.ssdMobilenetv1}\r\n                //         \\tvideoEl.paused ${videoEl.paused}\r\n                //         \\tvideoEl.ended ${videoEl.ended}\r\n                //         \\t!isFaceDetectionModelLoaded() ${!isFaceDetectionModelLoaded()}`)\r\n                return setTimeout(() => onPlay())\r\n            }\r\n\r\n            const options = getFaceDetectorOptions()\r\n            // console.log('options', options)\r\n            const result = await faceapi.detectSingleFace(videoEl, options).withFaceLandmarks()\r\n            // console.log('result', result)\r\n\r\n            if (result && result.landmarks) {\r\n                const canvas = canvasRef.current\r\n\r\n                // const [x,y] = result.landmarks.positions[1];\r\n                // console.log('result',x,y)\r\n                // const p = result.landmarks.positions\r\n                // console.log('result', p)\r\n\r\n                // const landmarkPositions = result.landmarks.positions\r\n                const landmarks = result.landmarks\r\n                // console.log('landmarks', landmarks)\r\n\r\n                // or get the positions of individual contours,\r\n                // only available for 68 point face ladnamrks (FaceLandmarks68)\r\n                const mouth = landmarks.getMouth()\r\n                // const jawOutline = landmarks.getJawOutline()\r\n                // const nose = landmarks.getNose()\r\n                // const leftEye = landmarks.getLeftEye()\r\n                // const rightEye = landmarks.getRightEye()\r\n                // const leftEyeBbrow = landmarks.getLeftEyeBrow()\r\n                // const rightEyeBrow = landmarks.getRightEyeBrow()\r\n\r\n                // console.log(mouth.length)\r\n                // let canvas = $('#overlay').get(0);\r\n                let ctx = canvas.getContext('2d');\r\n                // let ctx = document.getElementById('mouthCanvas').getContext('2d');\r\n                ctx.beginPath();\r\n                let scale = 3.0\r\n                let dx = mouth[0].x - 30\r\n                let dy = mouth[0].y - 30\r\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n                ctx.strokeStyle = \"blue\";\r\n                ctx.fillStyle = '#444';\r\n\r\n                // ctx.moveTo((mouth[0].x - dx) * scale, (mouth[0].y - dy) * scale);\r\n                // mouth.forEach(p => {\r\n                //   // console.log(p.x, p.y)\r\n                //   ctx.lineTo((p.x - dx) * scale, (p.y - dy) * scale);\r\n                // })\r\n                // ctx.lineTo((mouth[0].x - dx) * scale, (mouth[0].y - dy) * scale);\r\n\r\n                // let p1 = mouth[3];\r\n                // p1.x = (p1.x - dx) * scale\r\n                // p1.y = (p1.y - dy) * scale\r\n                ctx.beginPath();\r\n                mouth.forEach((p, i) => {\r\n                    let px = parseInt((p.x - dx) * scale)\r\n                    let py = parseInt((p.y - dy) * scale)\r\n                    ctx.strokeText(i, px, py);\r\n                    // ctx.arc((p.x - dx) * scale, (p.y - dy) * scale, 5, 0, 2 * Math.PI);\r\n                    ctx.stroke();\r\n                })\r\n\r\n\r\n                let height = mouth[9].y - mouth[3].y\r\n                let width = mouth[8].x - mouth[0].x\r\n\r\n                data.datasets[0].data.push(width);\r\n                if (data.datasets[0].data.length > 100)\r\n                    data.datasets[0].data.shift();\r\n\r\n                data.datasets[1].data.push(height);\r\n                if (data.datasets[1].data.length > 100)\r\n                    data.datasets[1].data.shift();\r\n\r\n                // let chart = chartRef.current.chart\r\n                // chart.update()\r\n\r\n            }\r\n\r\n        }\r\n        processFace();\r\n        setTimeout(() => onPlay())\r\n    }\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col rowSpan={2}>\r\n                    {/* <Webcam\r\n                        id=\"webcam\"\r\n                        audio={false}\r\n                        // height={720}\r\n                        // width={1280}\r\n                        ref={webcamRef}\r\n                        onUserMedia={onPlay}\r\n                        screenshotFormat=\"image/jpeg\"\r\n                        videoConstraints={videoConstraints}\r\n                    /> */}\r\n                    <video\r\n                        ref={webcamRef}\r\n                        onLoadedMetadata={onPlay}\r\n                        id=\"inputVideo\"\r\n                        // src={navigator.mediaDevices.getUserMedia({ video: {} })}\r\n                        autoPlay\r\n                        muted\r\n                        playsInline\r\n                        width={400} />\r\n                    <br />\r\n                    {/* <Button variant=\"outline-dark\" onClick={capture}>Capture photo</Button> */}\r\n\r\n                </Col>\r\n                <Col>\r\n                    <canvas id=\"mouthCanvas\" ref={canvasRef} width={400} height={200} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <LineChart\r\n                        // ref={chartRef} \r\n                        width={800}\r\n                        height={200}\r\n                        data={data} />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {\n  Navbar, NavDropdown,\n  Nav\n} from 'react-bootstrap';\n\nimport Home from \"./Home\";\nimport About from \"./About\";\nimport MuteChat from \"./MuteChat\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"home\">Mute Chat</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"mute-chat\">Mute Chat</Nav.Link>\n            <Nav.Link href=\"about\">About</Nav.Link>\n            <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n              <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n            </NavDropdown>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"#deets\">More deets</Nav.Link>\n            <Nav.Link eventKey={2} href=\"#memes\">\n              Dank memes\n      </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      <div>\n        {/* <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/mute-chat\">Mute Chat</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n          </ul>\n        </nav> */}\n\n        {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/mute-chat\">\n            <MuteChat />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}